
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/language/intrin_math.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_language_intrin_math.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_language_intrin_math.py:


Intrinsics and Math Functions
=============================
**Author**: `Tianqi Chen <https://tqchen.github.io>`_

While TVM supports basic arithmetic operations. In many cases
usually we will need more complicated builtin functions.
For example :code:`exp` to take the exponential of the function.

These functions are target system dependent and may have different
names of different target platforms. In this tutorial, we will learn
how we can invoke these target specific functions, and how we can unify
the interface via tvm's intrinsic API.

.. GENERATED FROM PYTHON SOURCE LINES 31-37

.. code-block:: default

    from __future__ import absolute_import, print_function

    import tvm
    from tvm import te
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 38-45

Direct Declare Extern Math Call
-------------------------------
The most straight-forward way to call target specific function is via
extern function call construct in tvm.
In the following example, we use :any:`tvm.tir.call_pure_extern` to call
:code:`__expf` function, which is only available under CUDA.


.. GENERATED FROM PYTHON SOURCE LINES 45-56

.. code-block:: default

    n = te.var("n")
    A = te.placeholder((n,), name="A")
    B = te.compute(A.shape, lambda i: tvm.tir.call_pure_extern("float32", "__expf", A[i]), name="B")
    s = te.create_schedule(B.op)
    num_thread = 64
    bx, tx = s[B].split(B.op.axis[0], factor=num_thread)
    s[B].bind(bx, te.thread_axis("blockIdx.x"))
    s[B].bind(tx, te.thread_axis("threadIdx.x"))
    f = tvm.build(s, [A, B], "cuda", name="myexp")
    print(f.imported_modules[0].get_source())



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/tutorials/language/intrin_math.py", line 53, in <module>
        f = tvm.build(s, [A, B], "cuda", name="myexp")
      File "/home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/docs/../python/tvm/driver/build_module.py", line 416, in build
        mod_host, mdev = _build_for_device(input_mod, tar, target_host)
      File "/home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/docs/../python/tvm/driver/build_module.py", line 297, in _build_for_device
        rt_mod_dev = codegen.build_module(mod_dev, target) if len(mod_dev.functions) != 0 else None
      File "/home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/docs/../python/tvm/target/codegen.py", line 39, in build_module
        return _ffi_api.Build(mod, target)
      File "/home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/docs/../python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
        raise get_last_ffi_error()
    tvm._ffi.base.TVMError: Traceback (most recent call last):
      [bt] (3) /home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/build/libtvm.so(TVMFuncCall+0x65) [0x7f14f98ff845]
      [bt] (2) /home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/build/libtvm.so(std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target))::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)+0x677) [0x7f14f9299617]
      [bt] (1) /home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/build/libtvm.so(tvm::codegen::Build(tvm::IRModule, tvm::Target)+0xe62) [0x7f14f9292f92]
      [bt] (0) /home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/build/libtvm.so(+0xba1e42) [0x7f14f9291e42]
      File "/home/sunchul/workspace/gitproj/tvmdoc.multilingual.io/desk/src/target/codegen.cc", line 58
    TVMError: 
    ---------------------------------------------------------------
    An internal invariant was violated during the execution of TVM.
    Please read TVM's error reporting guidelines.
    More details can be found here: https://discuss.tvm.ai/t/error-reporting/7793.
    ---------------------------------------------------------------
      Check failed: bf != nullptr == false: target.build.cuda is not enabled




.. GENERATED FROM PYTHON SOURCE LINES 57-69

Unified Intrinsic Call
----------------------
The above code verifies that direct external call can be used to
call into device specific functions.
However, the above way only works for CUDA target with float type.
Ideally, we want to write same code for any device and any data type.

TVM intrinsic provides the user a mechanism to achieve this, and this
is the recommended way to solve the problem.
The following code use te.exp instead, which create an intrinsic call
:py::func:`tvm.te.exp` to do the exponential.


.. GENERATED FROM PYTHON SOURCE LINES 69-79

.. code-block:: default

    n = te.var("n")
    A = te.placeholder((n,), name="A")
    B = te.compute(A.shape, lambda i: te.exp(A[i]), name="B")
    s = te.create_schedule(B.op)
    num_thread = 64
    bx, tx = s[B].split(B.op.axis[0], factor=num_thread)
    s[B].bind(bx, te.thread_axis("blockIdx.x"))
    s[B].bind(tx, te.thread_axis("threadIdx.x"))
    fcuda = tvm.build(s, [A, B], "cuda", name="myexp")
    print(fcuda.imported_modules[0].get_source())

.. GENERATED FROM PYTHON SOURCE LINES 80-83

We can find that the code works for both CUDA and opencl.
The same te.exp can also be used for float64 data types.


.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: default

    fopencl = tvm.build(s, [A, B], "opencl", name="myexp")
    print(fopencl.imported_modules[0].get_source())


.. GENERATED FROM PYTHON SOURCE LINES 87-96

Intrinsic Lowering Rule
-----------------------
When :py:func:`tvm.te.exp` is called, TVM creates an intrinsic Call Expr.
TVM uses transformation rules to transform the intrinsic
call to device specific extern calls.

TVM also allows user to customize the rules during runtime.
The following example customizes CUDA lowering rule for :code:`exp`.


.. GENERATED FROM PYTHON SOURCE LINES 96-116

.. code-block:: default



    def my_cuda_math_rule(op):
        """Customized CUDA intrinsic lowering rule"""
        assert isinstance(op, tvm.tir.Call)
        name = op.op.name
        assert name.startswith("tir.")
        dispatch_name = name[4:]
        if op.dtype == "float32":
            # call float function
            return tvm.tir.call_pure_extern("float32", "%sf" % dispatch_name, op.args[0])
        elif op.dtype == "float64":
            # call double function
            return tvm.tir.call_pure_extern("float32", dispatch_name, op.args[0])
        else:
            # cannot do translation, return self.
            return op


    tvm.target.register_intrin_rule("cuda", "exp", my_cuda_math_rule, override=True)

.. GENERATED FROM PYTHON SOURCE LINES 117-122

Register the rule to TVM with override option to override existing rule.
Notice the difference between the printed code from previous one:
our new rule uses math function :code:`expf` instead of
fast math version :code:`__expf`.


.. GENERATED FROM PYTHON SOURCE LINES 122-125

.. code-block:: default

    fcuda = tvm.build(s, [A, B], "cuda", name="myexp")
    print(fcuda.imported_modules[0].get_source())


.. GENERATED FROM PYTHON SOURCE LINES 126-132

Add Your Own Intrinsic
----------------------
If there is an intrinsic that is not provided by TVM.
User can easily add new intrinsic by using the intrinsic rule system.
The following example add an intrinsic :code:`mylog` to the system.


.. GENERATED FROM PYTHON SOURCE LINES 132-164

.. code-block:: default



    def mylog(x):
        """customized log intrinsic function"""
        return tvm.tir.call_intrin(x.dtype, "tir.mylog", x)


    def my_cuda_mylog_rule(op):
        """CUDA lowering rule for log"""
        if op.dtype == "float32":
            return tvm.tir.call_pure_extern("float32", "logf", op.args[0])
        elif op.dtype == "float64":
            return tvm.tir.call_pure_extern("float64", "log", op.args[0])
        else:
            return op


    # new op registration is triggered by registering an attribute of the op
    tvm.ir.register_op_attr("tir.mylog", "TCallEffectKind", tvm.tir.CallEffectKind.Pure)
    tvm.target.register_intrin_rule("cuda", "mylog", my_cuda_mylog_rule, override=True)

    n = te.var("n")
    A = te.placeholder((n,), name="A")
    B = te.compute(A.shape, lambda i: mylog(A[i]), name="B")
    s = te.create_schedule(B.op)
    num_thread = 64
    bx, tx = s[B].split(B.op.axis[0], factor=num_thread)
    s[B].bind(bx, te.thread_axis("blockIdx.x"))
    s[B].bind(tx, te.thread_axis("threadIdx.x"))
    fcuda = tvm.build(s, [A, B], "cuda", name="mylog")
    print(fcuda.imported_modules[0].get_source())


.. GENERATED FROM PYTHON SOURCE LINES 165-172

Summary
-------
- TVM can call extern target dependent math function.
- Use intrinsic to defined a unified interface for the functions.
- For more intrinsics available in tvm, take a look at :any:`tvm.tir`
- You can customize the intrinsic behavior by defining your own rules.



.. _sphx_glr_download_tutorials_language_intrin_math.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: intrin_math.py <intrin_math.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: intrin_math.ipynb <intrin_math.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
